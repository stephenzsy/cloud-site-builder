import { SlotContentSvgIcon } from "@/components/slot-content/svg-icon";
import { ComponentSlotContent } from "@/lib/models/components";
import { GraphqlLiveSiteLoader, SiteLoader } from "@/lib/site-loader";
import { supportedLocales } from "@/middleware";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { cookies } from "next/headers";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export async function generateStaticParams() {
  return supportedLocales.map((l) => ({
    locale: l,
  }));
}

function mapSlots(
  content: ComponentSlotContent[] | undefined
): [ComponentSlotContent[], Record<string, ComponentSlotContent[]>] {
  const namedSlots: Record<string, ComponentSlotContent[]> = {};
  const defaultSlot: ComponentSlotContent[] = [];

  if (content) {
    for (const entry of content) {
      if (entry.slotName) {
        let namedSlot = namedSlots[entry.slotName];
        if (!namedSlot) {
          namedSlot = namedSlots[entry.slotName] = [];
        }
        namedSlot.push(entry);
      } else {
        defaultSlot.push(entry);
      }
    }
  }
  return [defaultSlot, namedSlots];
}

function getLiveSiteLoader(): [SiteLoader, string] | undefined {
  const token = cookies().get("StrapiToken")?.value.trim();
  const siteId = cookies().get("StrapiSiteId")?.value.trim();
  if (token && siteId) {
    return [
      new GraphqlLiveSiteLoader(process.env.STRAPI_CMS_GRAPHQL_URL!, token),
      siteId,
    ];
  }
}

function getEnvSiteLoader(): [SiteLoader, string] | undefined {
  const token = process.env.STRAPI_TOKEN?.trim();
  const siteId = process.env.SITE_ID?.trim();
  if (token && siteId) {
    return [
      new GraphqlLiveSiteLoader(process.env.STRAPI_CMS_GRAPHQL_URL!, token),
      siteId,
    ];
  }
}

export default async function RootLayout({
  params,
  children,
}: {
  params: { locale: string };
  children: React.ReactNode;
}) {
  const loaderConfig =
    process.env.CSB_FE_ROLE === "preview"
      ? getLiveSiteLoader()
      : getEnvSiteLoader();
  if (!loaderConfig) {
    return (
      <html lang={params.locale}>
        <body>No site available</body>
      </html>
    );
  }
  const [siteLoader, siteId] = loaderConfig;
  const siteEntity = await siteLoader.getSiteAsync(siteId, params.locale);
  // map slot
  const { cssVariables, content } = siteEntity?.attributes ?? {};
  const cssLine = cssVariables && `:root{${cssVariables.join(";")}`;
  const [defaultSlot, namedSlots] = mapSlots(content);
  return (
    <html lang={params.locale}>
      <body className={inter.className}>
        {cssLine && <style>{cssLine}</style>}
        <header className="pt-safe pl-safe pr-safe">
          <div className="flex flex-row p-4 items-center gap-2 mx-auto max-w-5xl">
            <span className="text-6xl text-brand">
              <SlotContentSvgIcon content={namedSlots["site-logo"]} />
            </span>
            {namedSlots["site-title"]?.map((slot, index) => {
              return (
                <h1 key={index} className="font-bold text-5xl text-brand">
                  {slot.textValue}
                </h1>
              );
            })}
          </div>
        </header>
        {children}
      </body>
    </html>
  );
}
