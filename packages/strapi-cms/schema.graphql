### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Block {
  children(filters: ComponentBlockComposeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlockCompose]
  createdAt: DateTime
  htmlTag: ENUM_BLOCK_HTMLTAG
  name: String
  slot: SlotEntityResponse
  twClass: String
  updatedAt: DateTime
}

type BlockEntity {
  attributes: Block
  id: ID
}

type BlockEntityResponse {
  data: BlockEntity
}

type BlockEntityResponseCollection {
  data: [BlockEntity!]!
  meta: ResponseCollectionMeta!
}

input BlockFiltersInput {
  and: [BlockFiltersInput]
  children: ComponentBlockComposeFiltersInput
  createdAt: DateTimeFilterInput
  htmlTag: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: BlockFiltersInput
  or: [BlockFiltersInput]
  slot: SlotFiltersInput
  twClass: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BlockInput {
  children: [ComponentBlockComposeInput]
  htmlTag: ENUM_BLOCK_HTMLTAG
  name: String
  slot: ID
  twClass: String
}

type BlockRelationResponseCollection {
  data: [BlockEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentBlockCompose {
  block: BlockEntityResponse
  description: String
  id: ID!
  specialSlot: ENUM_COMPONENTBLOCKCOMPOSE_SPECIALSLOT
  twClass: String
}

input ComponentBlockComposeFiltersInput {
  and: [ComponentBlockComposeFiltersInput]
  block: BlockFiltersInput
  description: StringFilterInput
  not: ComponentBlockComposeFiltersInput
  or: [ComponentBlockComposeFiltersInput]
  specialSlot: StringFilterInput
  twClass: StringFilterInput
}

input ComponentBlockComposeInput {
  block: ID
  description: String
  id: ID
  specialSlot: ENUM_COMPONENTBLOCKCOMPOSE_SPECIALSLOT
  twClass: String
}

type ComponentContentShortText {
  description: String
  id: ID!
  targets(filters: SlotFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SlotRelationResponseCollection
  value: String
}

input ComponentContentShortTextFiltersInput {
  and: [ComponentContentShortTextFiltersInput]
  description: StringFilterInput
  not: ComponentContentShortTextFiltersInput
  or: [ComponentContentShortTextFiltersInput]
  targets: SlotFiltersInput
  value: StringFilterInput
}

input ComponentContentShortTextInput {
  description: String
  id: ID
  targets: [ID]
  value: String
}

type ComponentContentSvgIcon {
  description: String
  height: Int!
  iconPathData: JSON!
  id: ID!
  targets(filters: SlotFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SlotRelationResponseCollection
  width: Int!
}

input ComponentContentSvgIconFiltersInput {
  and: [ComponentContentSvgIconFiltersInput]
  description: StringFilterInput
  height: IntFilterInput
  iconPathData: JSONFilterInput
  not: ComponentContentSvgIconFiltersInput
  or: [ComponentContentSvgIconFiltersInput]
  targets: SlotFiltersInput
  width: IntFilterInput
}

input ComponentContentSvgIconInput {
  description: String
  height: Int
  iconPathData: JSON
  id: ID
  targets: [ID]
  width: Int
}

type ComponentThemeCssVariable {
  entry: String!
  id: ID!
}

input ComponentThemeCssVariableFiltersInput {
  and: [ComponentThemeCssVariableFiltersInput]
  entry: StringFilterInput
  not: ComponentThemeCssVariableFiltersInput
  or: [ComponentThemeCssVariableFiltersInput]
}

input ComponentThemeCssVariableInput {
  entry: String
  id: ID
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_BLOCK_HTMLTAG {
  div
  footer
  header
  main
  section
  span
}

enum ENUM_COMPONENTBLOCKCOMPOSE_SPECIALSLOT {
  page
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = Block | ComponentBlockCompose | ComponentContentShortText | ComponentContentSvgIcon | ComponentThemeCssVariable | GlobalDefault | I18NLocale | Page | Site | Slot | Template | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type GlobalDefault {
  createdAt: DateTime
  publishedAt: DateTime
  template: TemplateEntityResponse
  updatedAt: DateTime
}

type GlobalDefaultEntity {
  attributes: GlobalDefault
  id: ID
}

type GlobalDefaultEntityResponse {
  data: GlobalDefaultEntity
}

type GlobalDefaultEntityResponseCollection {
  data: [GlobalDefaultEntity!]!
  meta: ResponseCollectionMeta!
}

input GlobalDefaultFiltersInput {
  and: [GlobalDefaultFiltersInput]
  createdAt: DateTimeFilterInput
  not: GlobalDefaultFiltersInput
  or: [GlobalDefaultFiltersInput]
  publishedAt: DateTimeFilterInput
  template: TemplateFiltersInput
  updatedAt: DateTimeFilterInput
}

input GlobalDefaultInput {
  publishedAt: DateTime
  template: ID
}

type GlobalDefaultRelationResponseCollection {
  data: [GlobalDefaultEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createBlock(data: BlockInput!): BlockEntityResponse
  createPage(data: PageInput!, locale: I18NLocaleCode): PageEntityResponse
  createPageLocalization(data: PageInput, id: ID, locale: I18NLocaleCode): PageEntityResponse
  createSite(data: SiteInput!, locale: I18NLocaleCode): SiteEntityResponse
  createSiteLocalization(data: SiteInput, id: ID, locale: I18NLocaleCode): SiteEntityResponse
  createSlot(data: SlotInput!): SlotEntityResponse
  createTemplate(data: TemplateInput!): TemplateEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteBlock(id: ID!): BlockEntityResponse
  deleteGlobalDefault: GlobalDefaultEntityResponse
  deletePage(id: ID!, locale: I18NLocaleCode): PageEntityResponse
  deleteSite(id: ID!, locale: I18NLocaleCode): SiteEntityResponse
  deleteSlot(id: ID!): SlotEntityResponse
  deleteTemplate(id: ID!): TemplateEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateBlock(data: BlockInput!, id: ID!): BlockEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGlobalDefault(data: GlobalDefaultInput!): GlobalDefaultEntityResponse
  updatePage(data: PageInput!, id: ID!, locale: I18NLocaleCode): PageEntityResponse
  updateSite(data: SiteInput!, id: ID!, locale: I18NLocaleCode): SiteEntityResponse
  updateSlot(data: SlotInput!, id: ID!): SlotEntityResponse
  updateTemplate(data: TemplateInput!, id: ID!): TemplateEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Page {
  content: [PageContentDynamicZone]
  createdAt: DateTime
  locale: String
  localizations(filters: PageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PageRelationResponseCollection
  name: String
  site: SiteEntityResponse
  slug: String
  template: TemplateEntityResponse
  updatedAt: DateTime
}

union PageContentDynamicZone = ComponentContentShortText | ComponentContentSvgIcon | Error

scalar PageContentDynamicZoneInput

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  and: [PageFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: PageFiltersInput
  name: StringFilterInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  site: SiteFiltersInput
  slug: StringFilterInput
  template: TemplateFiltersInput
  updatedAt: DateTimeFilterInput
}

input PageInput {
  content: [PageContentDynamicZoneInput!]
  name: String
  site: ID
  slug: String
  template: ID
}

type PageRelationResponseCollection {
  data: [PageEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  block(id: ID): BlockEntityResponse
  blocks(filters: BlockFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BlockEntityResponseCollection
  globalDefault(publicationState: PublicationState = LIVE): GlobalDefaultEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  page(id: ID, locale: I18NLocaleCode): PageEntityResponse
  pages(filters: PageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): PageEntityResponseCollection
  site(id: ID, locale: I18NLocaleCode): SiteEntityResponse
  sites(filters: SiteFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): SiteEntityResponseCollection
  slot(id: ID): SlotEntityResponse
  slots(filters: SlotFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SlotEntityResponseCollection
  template(id: ID): TemplateEntityResponse
  templates(filters: TemplateFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TemplateEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Site {
  content: [SiteContentDynamicZone]
  createdAt: DateTime
  locale: String
  localizations(filters: SiteFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SiteRelationResponseCollection
  name: String
  pages(filters: PageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PageRelationResponseCollection
  template: TemplateEntityResponse
  uid: String
  updatedAt: DateTime
}

union SiteContentDynamicZone = ComponentContentShortText | ComponentContentSvgIcon | Error

scalar SiteContentDynamicZoneInput

type SiteEntity {
  attributes: Site
  id: ID
}

type SiteEntityResponse {
  data: SiteEntity
}

type SiteEntityResponseCollection {
  data: [SiteEntity!]!
  meta: ResponseCollectionMeta!
}

input SiteFiltersInput {
  and: [SiteFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: SiteFiltersInput
  name: StringFilterInput
  not: SiteFiltersInput
  or: [SiteFiltersInput]
  pages: PageFiltersInput
  template: TemplateFiltersInput
  uid: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SiteInput {
  content: [SiteContentDynamicZoneInput!]
  name: String
  pages: [ID]
  template: ID
  uid: String
}

type SiteRelationResponseCollection {
  data: [SiteEntity!]!
}

type Slot {
  blocks(filters: BlockFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BlockRelationResponseCollection
  createdAt: DateTime
  name: String
  uid: String!
  updatedAt: DateTime
}

type SlotEntity {
  attributes: Slot
  id: ID
}

type SlotEntityResponse {
  data: SlotEntity
}

type SlotEntityResponseCollection {
  data: [SlotEntity!]!
  meta: ResponseCollectionMeta!
}

input SlotFiltersInput {
  and: [SlotFiltersInput]
  blocks: BlockFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: SlotFiltersInput
  or: [SlotFiltersInput]
  uid: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SlotInput {
  blocks: [ID]
  name: String
  uid: String
}

type SlotRelationResponseCollection {
  data: [SlotEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Template {
  createdAt: DateTime
  cssVariables(filters: ComponentThemeCssVariableFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentThemeCssVariable]
  name: String
  pageLayout: BlockEntityResponse
  siteLayout: BlockEntityResponse
  updatedAt: DateTime
}

type TemplateEntity {
  attributes: Template
  id: ID
}

type TemplateEntityResponse {
  data: TemplateEntity
}

type TemplateEntityResponseCollection {
  data: [TemplateEntity!]!
  meta: ResponseCollectionMeta!
}

input TemplateFiltersInput {
  and: [TemplateFiltersInput]
  createdAt: DateTimeFilterInput
  cssVariables: ComponentThemeCssVariableFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: TemplateFiltersInput
  or: [TemplateFiltersInput]
  pageLayout: BlockFiltersInput
  siteLayout: BlockFiltersInput
  updatedAt: DateTimeFilterInput
}

input TemplateInput {
  cssVariables: [ComponentThemeCssVariableInput]
  name: String
  pageLayout: ID
  siteLayout: ID
}

type TemplateRelationResponseCollection {
  data: [TemplateEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
